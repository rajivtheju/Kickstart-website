[
    {
        "id": 1,
        "question": "What is the difference between C and C++?",
        "answer": "C++ is an extension of the C programming language. It adds object-oriented programming features, templates, and other improvements."
    },
    {
        "id": 2,
        "question": "What is the use of classes in C++?",
        "answer": "Classes are used to define custom data types and encapsulate data and methods that operate on that data."
    },
    {
        "id": 3,
        "question": "What is the difference between public, private, and protected access specifiers in C++?",
        "answer": "Public access specifiers make members accessible from anywhere, private makes them accessible only within the class, and protected makes them accessible within the class and its derived classes."
    },
    {
        "id": 4,
        "question": "What is the use of constructors in C++?",
        "answer": "Constructors are used to initialize objects when they are created."
    },
    {
        "id": 5,
        "question": "What is the difference between const and volatile in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while volatile is used to specify that a variable can be changed unexpectedly."
    },
    {
        "id": 6,
        "question": "What is the use of templates in C++?",
        "answer": "Templates are used to create generic functions and classes that can work with different data types."
    },
    {
        "id": 7,
        "question": "What is the difference between stack and heap memory in C++?",
        "answer": "Stack memory is used for automatic variables and is managed by the compiler, while heap memory is used for dynamic memory allocation and is managed by the programmer."
    },
    {
        "id": 8,
        "question": "What is the use of smart pointers in C++?",
        "answer": "Smart pointers are used to manage memory automatically and prevent memory leaks."
    },
    {
        "id": 9,
        "question": "What is the difference between auto and static in C++?",
        "answer": "auto is used to declare variables with automatic storage duration, while static is used to declare variables with static storage duration."
    },
    {
        "id": 10,
        "question": "What is the use of exception handling in C++?",
        "answer": "Exception handling is used to handle runtime errors and exceptions in a program."
    },
    {
        "id": 11,
        "question": "What is the difference between throw and throw() in C++?",
        "answer": "throw is used to throw an exception, while throw() is used to rethrow an exception."
    },
    {
        "id": 12,
        "question": "What is the use of try-catch blocks in C++?",
        "answer": "Try-catch blocks are used to catch and handle exceptions in a program."
    },
    {
        "id": 13,
        "question": "What is the difference between finally and catch in C++?",
        "answer": "finally is used to specify code that should be executed regardless of whether an exception is thrown or not, while catch is used to specify code that should be executed when an exception is thrown."
    },
    {
        "id": 14,
        "question": "What is the use of operator overloading in C++?",
        "answer": "Operator overloading is used to redefine the behavior of operators for user-defined types."
    },
    {
        "id": 15,
        "question": "What is the difference between const and mutable in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while mutable is used to specify that a variable can be changed even if it is declared as const."
    },
    {
        "id": 16,
        "question": "What is the use of static variables in C++?",
        "answer": "Static variables are used to declare variables that are shared by all instances of a class."
    },
    {
        "id": 17,
        "question": "What is the difference between static and dynamic casting in C++?",
        "answer": "Static casting is used to cast a variable to a different type, while dynamic casting is used to cast a variable to a different type at runtime."
    },
    {
        "id": 18,
        "question": "What is the use of typeid in C++?",
        "answer": "typeid is used to get the type of a variable or expression."
    },
    {
        "id": 19,
        "question": "What is the difference between virtual and pure virtual functions in C++?",
        "answer": "Virtual functions are used to specify functions that can be overridden in derived classes, while pure virtual functions are used to specify functions that must be implemented in derived classes."
    },
    {
        "id": 20,
        "question": "What is the use of abstract classes in C++?",
        "answer": "Abstract classes are used to define classes that cannot be instantiated and are used as base classes for other classes."
    },
    {
        "id": 21,
        "question": "What is the difference between abstract and concrete classes in C++?",
        "answer": "Abstract classes are classes that cannot be instantiated, while concrete classes are classes that can be instantiated."
    },
    {
        "id": 22,
        "question": "What is the use of interfaces in C++?",
        "answer": "Interfaces are used to define a contract that must be implemented by derived classes."
    },
    {
        "id": 23,
        "question": "What is the difference between interface and abstract class in C++?",
        "answer": "Interfaces are used to define a contract, while abstract classes are used to define a base class."
    },
    {
        "id": 24,
        "question": "What is the use of polymorphism in C++?",
        "answer": "Polymorphism is used to specify multiple forms of a function or operator that can be used depending on the context."
    },
    {
        "id": 25,
        "question": "What is the difference between compile-time and runtime polymorphism in C++?",
        "answer": "Compile-time polymorphism is used to specify multiple forms of a function or operator that are determined at compile-time, while runtime polymorphism is used to specify multiple forms of a function or operator that are determined at runtime."
    },
    {
        "id": 26,
        "question": "What is the use of encapsulation in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class and expose only the necessary information to the outside world."
    },
    {
        "id": 27,
        "question": "What is the difference between encapsulation and abstraction in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class, while abstraction is used to expose only the necessary information to the outside world."
    },
    {
        "id": 28,
        "question": "What is the use of inheritance in C++?",
        "answer": "Inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 29,
        "question": "What is the difference between single inheritance and multiple inheritance in C++?",
        "answer": "Single inheritance is used to create a new class that is a modified version of a single existing class, while multiple inheritance is used to create a new class that is a modified version of multiple existing classes."
    },
    {
        "id": 30,
        "question": "What is the use of composition in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes."
    },
    {
        "id": 31,
        "question": "What is the difference between composition and inheritance in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes, while inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 32,
        "question": "What is the use of friend functions in C++?",
        "answer": "Friend functions are used to specify functions that have access to the private and protected members of a class."
    },
    {
        "id": 33,
        "question": "What is the difference between friend functions and member functions in C++?",
        "answer": "Friend functions are functions that are not members of a class but have access to its members, while member functions are functions that are members of a class."
    },
    {
        "id": 34,
        "question": "What is the use of operator overloading in C++?",
        "answer": "Operator overloading is used to redefine the behavior of operators for user-defined types."
    },
    {
        "id": 35,
        "question": "What is the difference between const and mutable in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while mutable is used to specify that a variable can be changed even if it is declared as const."
    },
    {
        "id": 36,
        "question": "What is the use of static variables in C++?",
        "answer": "Static variables are used to declare variables that are shared by all instances of a class."
    },
    {
        "id": 37,
        "question": "What is the difference between static and dynamic casting in C++?",
        "answer": "Static casting is used to cast a variable to a different type, while dynamic casting is used to cast a variable to a different type at runtime."
    },
    {
        "id": 38,
        "question": "What is the use of typeid in C++?",
        "answer": "typeid is used to get the type of a variable or expression."
    },
    {
        "id": 39,
        "question": "What is the difference between virtual and pure virtual functions in C++?",
        "answer": "Virtual functions are used to specify functions that can be overridden in derived classes, while pure virtual functions are used to specify functions that must be implemented in derived classes."
    },
    {
        "id": 40,
        "question": "What is the use of abstract classes in C++?",
        "answer": "Abstract classes are used to define classes that cannot be instantiated and are used as base classes for other classes."
    },
    {
        "id": 41,
    "question": "What is the difference between a pointer and a reference in C++?",
    "answer": "A pointer is a variable that stores the memory address of another variable, while a reference is an alias for another variable."
    },
    {
        "id": 42,
        "question": "What is the difference between abstract and concrete classes in C++?",
        "answer": "Abstract classes are classes that cannot be instantiated, while concrete classes are classes that can be instantiated."
    },
    {
        "id": 43,
        "question": "What is the use of interfaces in C++?",
        "answer": "Interfaces are used to define a contract that must be implemented by derived classes."
    },
    {
        "id": 44,
        "question": "What is the difference between interface and abstract class in C++?",
        "answer": "Interfaces are used to define a contract, while abstract classes are used to define a base class."
    },
    {
        "id": 45,
        "question": "What is the use of polymorphism in C++?",
        "answer": "Polymorphism is used to specify multiple forms of a function or operator that can be used depending on the context."
    },
    {
        "id": 46,
        "question": "What is the difference between compile-time and runtime polymorphism in C++?",
        "answer": "Compile-time polymorphism is used to specify multiple forms of a function or operator that are determined at compile-time, while runtime polymorphism is used to specify multiple forms of a function or operator that are determined at runtime."
    },
    {
        "id": 47,
        "question": "What is the use of encapsulation in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class and expose only the necessary information to the outside world."
    },
    {
        "id": 48,
        "question": "What is the difference between encapsulation and abstraction in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class, while abstraction is used to expose only the necessary information to the outside world."
    },
    {
        "id": 49,
        "question": "What is the use of inheritance in C++?",
        "answer": "Inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 50,
        "question": "What is the difference between single inheritance and multiple inheritance in C++?",
        "answer": "Single inheritance is used to create a new class that is a modified version of a single existing class, while multiple inheritance is used to create a new class that is a modified version of multiple existing classes."
    },
    {
        "id": 51,
        "question": "What is the use of composition in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes."
    },
    {
        "id": 52,
        "question": "What is the difference between composition and inheritance in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes, while inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 53,
        "question": "What is the use of friend functions in C++?",
        "answer": "Friend functions are used to specify functions that have access to the private and protected members of a class."
    },
    {
        "id": 54,
        "question": "What is the difference between friend functions and member functions in C++?",
        "answer": "Friend functions are functions that are not members of a class but have access to its members, while member functions are functions that are members of a class."
    },
    {
        "id": 55,
        "question": "What is the use of operator overloading in C++?",
        "answer": "Operator overloading is used to redefine the behavior of operators for user-defined types."
    },
    {
        "id": 56,
        "question": "What is the difference between const and mutable in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while mutable is used to specify that a variable can be changed even if it is declared as const."
    },
    {
        "id": 57,
        "question": "What is the use of static variables in C++?",
        "answer": "Static variables are used to declare variables that are shared by all instances of a class."
    },
    {
        "id": 58,
        "question": "What is the difference between static and dynamic casting in C++?",
        "answer": "Static casting is used to cast a variable to a different type, while dynamic casting is used to cast a variable to a different type at runtime."
    },
    {
        "id": 59,
        "question": "What is the use of typeid in C++?",
        "answer": "typeid is used to get the type of a variable or expression."
    },
    {
        "id": 60,
        "question": "What is the difference between virtual and pure virtual functions in C++?",
        "answer": "Virtual functions are used to specify functions that can be overridden in derived classes, while pure virtual functions are used to specify functions that must be implemented in derived classes."
    },
    {
        "id": 61,
        "question": "What is the use of abstract classes in C++?",
        "answer": "Abstract classes are used to define classes that cannot be instantiated and are used as base classes for other classes."
    },
    {
        "id": 62,
        "question": "What is the difference between abstract and concrete classes in C++?",
        "answer": "Abstract classes are classes that cannot be instantiated, while concrete classes are classes that can be instantiated."
    },
    {
        "id": 63,
        "question": "What is the use of interfaces in C++?",
        "answer": "Interfaces are used to define a contract that must be implemented by derived classes."
    },
    {
        "id": 64,
        "question": "What is the difference between interface and abstract class in C++?",
        "answer": "Interfaces are used to define a contract, while abstract classes are used to define a base class."
    },
    {
        "id": 65,
        "question": "What is the use of polymorphism in C++?",
        "answer": "Polymorphism is used to specify multiple forms of a function or operator that can be used depending on the context."
    },
    {
        "id": 66,
        "question": "What is the difference between compile-time and runtime polymorphism in C++?",
        "answer": "Compile-time polymorphism is used to specify multiple forms of a function or operator that are determined at compile-time, while runtime polymorphism is used to specify multiple forms of a function or operator that are determined at runtime."
    },
    {
        "id": 67,
        "question": "What is the use of encapsulation in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class and expose only the necessary information to the outside world."
    },
    {
        "id": 68,
        "question": "What is the difference between encapsulation and abstraction in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class, while abstraction is used to expose only the necessary information to the outside world."
    },
    {
        "id": 69,
        "question": "What is the use of inheritance in C++?",
        "answer": "Inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 70,
        "question": "What is the difference between single inheritance and multiple inheritance in C++?",
        "answer": "Single inheritance is used to create a new class that is a modified version of a single existing class, while multiple inheritance is used to create a new class that is a modified version of multiple existing classes."
    },
    {
        "id": 71,
        "question": "What is the use of composition in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes."
    },
    {
        "id": 72,
        "question": "What is the difference between composition and inheritance in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes, while inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 73,
        "question": "What is the use of friend functions in C++?",
        "answer": "Friend functions are used to specify functions that have access to the private and protected members of a class."
    },
    {
        "id": 74,
        "question": "What is the difference between friend functions and member functions in C++?",
        "answer": "Friend functions are functions that are not members of a class but have access to its members, while member functions are functions that are members of a class."
    },
    {
        "id": 75,
        "question": "What is the use of operator overloading in C++?",
        "answer": "Operator overloading is used to redefine the behavior of operators for user-defined types."
    },
    {
        "id": 76,
        "question": "What is the difference between const and mutable in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while mutable is used to specify that a variable can be changed even if it is declared as const."
    },
    {
        "id": 77,
        "question": "What is the use of static variables in C++?",
        "answer": "Static variables are used to declare variables that are shared by all instances of a class."
    },
    {
        "id": 78,
        "question": "What is the difference between static and dynamic casting in C++?",
        "answer": "Static casting is used to cast a variable to a different type, while dynamic casting is used to cast a variable to a different type at runtime."
    },
    {
        "id": 79,
        "question": "What is the use of typeid in C++?",
        "answer": "typeid is used to get the type of a variable or expression."
    },
    {
        "id": 80,
        "question": "What is the difference between virtual and pure virtual functions in C++?",
        "answer": "Virtual functions are used to specify functions that can be overridden in derived classes, while pure virtual functions are used to specify functions that must be implemented in derived classes."
    },
    {
        "id": 81,
        "question": "What is the use of abstract classes in C++?",
        "answer": "Abstract classes are used to define classes that cannot be instantiated and are used as base classes for other classes."
    },
    {
        "id": 82,
        "question": "What is the difference between abstract and concrete classes in C++?",
        "answer": "Abstract classes are classes that cannot be instantiated, while concrete classes are classes that can be instantiated."
    },
    {
        "id": 83,
        "question": "What is the use of interfaces in C++?",
        "answer": "Interfaces are used to define a contract that must be implemented by derived classes."
    },
    {
        "id": 84,
        "question": "What is the difference between interface and abstract class in C++?",
        "answer": "Interfaces are used to define a contract, while abstract classes are used to define a base class."
    },
    {
        "id": 85,
        "question": "What is the use of polymorphism in C++?",
        "answer": "Polymorphism is used to specify multiple forms of a function or operator that can be used depending on the context."
    },
    {
        "id": 86,
        "question": "What is the difference between compile-time and runtime polymorphism in C++?",
        "answer": "Compile-time polymorphism is used to specify multiple forms of a function or operator that are determined at compile-time, while runtime polymorphism is used to specify multiple forms of a function or operator that are determined at runtime."
    },
    {
        "id": 87,
        "question": "What is the use of encapsulation in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class and expose only the necessary information to the outside world."
    },
    {
        "id": 88,
        "question": "What is the difference between encapsulation and abstraction in C++?",
        "answer": "Encapsulation is used to hide the implementation details of a class, while abstraction is used to expose only the necessary information to the outside world."
    },
    {
        "id": 89,
        "question": "What is the use of inheritance in C++?",
        "answer": "Inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 90,
        "question": "What is the difference between single inheritance and multiple inheritance in C++?",
        "answer": "Single inheritance is used to create a new class that is a modified version of a single existing class, while multiple inheritance is used to create a new class that is a modified version of multiple existing classes."
    },
    {
        "id": 91,
        "question": "What is the use of composition in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes."
    },
    {
        "id": 92,
        "question": "What is the difference between composition and inheritance in C++?",
        "answer": "Composition is used to create a new class that is composed of multiple existing classes, while inheritance is used to create a new class that is a modified version of an existing class."
    },
    {
        "id": 93,
        "question": "What is the use of friend functions in C++?",
        "answer": "Friend functions are used to specify functions that have access to the private and protected members of a class."
    },
    {
        "id": 94,
        "question": "What is the difference between friend functions and member functions in C++?",
        "answer": "Friend functions are functions that are not members of a class but have access to its members, while member functions are functions that are members of a class."
    },
    {
        "id": 95,
        "question": "What is the use of operator overloading in C++?",
        "answer": "Operator overloading is used to redefine the behavior of operators for user-defined types."
    },
    {
        "id": 96,
        "question": "What is the difference between const and mutable in C++?",
        "answer": "const is used to specify that a variable cannot be changed, while mutable is used to specify that a variable can be changed even if it is declared as const."
    },
    {
        "id": 97,
        "question": "What is the use of static variables in C++?",
        "answer": "Static variables are used to declare variables that are shared by all instances of a class."
    },
    {
        "id": 98,
        "question": "What is the difference between static and dynamic casting in C++?",
        "answer": "Static casting is used to cast a variable to a different type, while dynamic casting is used to cast a variable to a different type at runtime."
    },
    {
        "id": 99,
        "question": "What is the use of typeid in C++?",
        "answer": "typeid is used to get the type of a variable or expression."
    },
    {
        "id": 100,
        "question": "What is the difference between virtual and pure virtual functions in C++?",
        "answer": "Virtual functions are used to specify functions that can be overridden in derived classes, while pure virtual functions are used to specify functions that must be implemented in derived classes."
    }
]